import torch.nn.utils.prune as prune

def prune_ViT(model, prune_ratio):
  parameters_to_prune = [
    (model.embedding, 'weight'),
    (model.transformer.encoder_layers[0].norm1, 'weight'),
    (model.transformer.encoder_layers[0].attn.query, 'weight'),
    (model.transformer.encoder_layers[0].attn.key, 'weight'),
    (model.transformer.encoder_layers[0].attn.value, 'weight'),
    (model.transformer.encoder_layers[0].attn.out, 'weight'),
    (model.transformer.encoder_layers[0].norm2, 'weight'),
    (model.transformer.encoder_layers[0].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[0].mlp.fc2, 'weight'),
    (model.transformer.encoder_layers[1].norm1, 'weight'),
    (model.transformer.encoder_layers[1].attn.query, 'weight'),
    (model.transformer.encoder_layers[1].attn.key, 'weight'),
    (model.transformer.encoder_layers[1].attn.value, 'weight'),
    (model.transformer.encoder_layers[1].attn.out, 'weight'),
    (model.transformer.encoder_layers[1].norm2, 'weight'),
    (model.transformer.encoder_layers[1].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[1].mlp.fc2, 'weight'),
    (model.transformer.encoder_layers[2].norm1, 'weight'),
    (model.transformer.encoder_layers[2].attn.query, 'weight'),
    (model.transformer.encoder_layers[2].attn.key, 'weight'),
    (model.transformer.encoder_layers[2].attn.value, 'weight'),
    (model.transformer.encoder_layers[2].attn.out, 'weight'),
    (model.transformer.encoder_layers[2].norm2, 'weight'),
    (model.transformer.encoder_layers[2].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[2].mlp.fc2, 'weight'),
    (model.transformer.encoder_layers[3].norm1, 'weight'),
    (model.transformer.encoder_layers[3].attn.query, 'weight'),
    (model.transformer.encoder_layers[3].attn.key, 'weight'),
    (model.transformer.encoder_layers[3].attn.value, 'weight'),
    (model.transformer.encoder_layers[3].attn.out, 'weight'),
    (model.transformer.encoder_layers[3].norm2, 'weight'),
    (model.transformer.encoder_layers[3].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[3].mlp.fc2, 'weight'),
    (model.transformer.encoder_layers[4].norm1, 'weight'),
    (model.transformer.encoder_layers[4].attn.query, 'weight'),
    (model.transformer.encoder_layers[4].attn.key, 'weight'),
    (model.transformer.encoder_layers[4].attn.value, 'weight'),
    (model.transformer.encoder_layers[4].attn.out, 'weight'),
    (model.transformer.encoder_layers[4].norm2, 'weight'),
    (model.transformer.encoder_layers[4].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[4].mlp.fc2, 'weight'),
    (model.transformer.encoder_layers[5].norm1, 'weight'),
    (model.transformer.encoder_layers[5].attn.query, 'weight'),
    (model.transformer.encoder_layers[5].attn.key, 'weight'),
    (model.transformer.encoder_layers[5].attn.value, 'weight'),
    (model.transformer.encoder_layers[5].attn.out, 'weight'),
    (model.transformer.encoder_layers[5].norm2, 'weight'),
    (model.transformer.encoder_layers[5].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[5].mlp.fc2, 'weight'),
    (model.transformer.encoder_layers[6].norm1, 'weight'),
    (model.transformer.encoder_layers[6].attn.query, 'weight'),
    (model.transformer.encoder_layers[6].attn.key, 'weight'),
    (model.transformer.encoder_layers[6].attn.value, 'weight'),
    (model.transformer.encoder_layers[6].attn.out, 'weight'),
    (model.transformer.encoder_layers[6].norm2, 'weight'),
    (model.transformer.encoder_layers[6].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[6].mlp.fc2, 'weight'),
    (model.transformer.encoder_layers[7].norm1, 'weight'),
    (model.transformer.encoder_layers[7].attn.query, 'weight'),
    (model.transformer.encoder_layers[7].attn.key, 'weight'),
    (model.transformer.encoder_layers[7].attn.value, 'weight'),
    (model.transformer.encoder_layers[7].attn.out, 'weight'),
    (model.transformer.encoder_layers[7].norm2, 'weight'),
    (model.transformer.encoder_layers[7].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[7].mlp.fc2, 'weight'),
    (model.transformer.encoder_layers[8].norm1, 'weight'),
    (model.transformer.encoder_layers[8].attn.query, 'weight'),
    (model.transformer.encoder_layers[8].attn.key, 'weight'),
    (model.transformer.encoder_layers[8].attn.value, 'weight'),
    (model.transformer.encoder_layers[8].attn.out, 'weight'),
    (model.transformer.encoder_layers[8].norm2, 'weight'),
    (model.transformer.encoder_layers[8].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[8].mlp.fc2, 'weight'),
    (model.transformer.encoder_layers[9].norm1, 'weight'),
    (model.transformer.encoder_layers[9].attn.query, 'weight'),
    (model.transformer.encoder_layers[9].attn.key, 'weight'),
    (model.transformer.encoder_layers[9].attn.value, 'weight'),
    (model.transformer.encoder_layers[9].attn.out, 'weight'),
    (model.transformer.encoder_layers[9].norm2, 'weight'),
    (model.transformer.encoder_layers[9].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[9].mlp.fc2, 'weight'),
    (model.transformer.encoder_layers[10].norm1, 'weight'),
    (model.transformer.encoder_layers[10].attn.query, 'weight'),
    (model.transformer.encoder_layers[10].attn.key, 'weight'),
    (model.transformer.encoder_layers[10].attn.value, 'weight'),
    (model.transformer.encoder_layers[10].attn.out, 'weight'),
    (model.transformer.encoder_layers[10].norm2, 'weight'),
    (model.transformer.encoder_layers[10].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[10].mlp.fc2, 'weight'),
    (model.transformer.encoder_layers[11].norm1, 'weight'),
    (model.transformer.encoder_layers[11].attn.query, 'weight'),
    (model.transformer.encoder_layers[11].attn.key, 'weight'),
    (model.transformer.encoder_layers[11].attn.value, 'weight'),
    (model.transformer.encoder_layers[11].attn.out, 'weight'),
    (model.transformer.encoder_layers[11].norm2, 'weight'),
    (model.transformer.encoder_layers[11].mlp.fc1, 'weight'),
    (model.transformer.encoder_layers[11].mlp.fc2, 'weight'),
    (model.classifier, 'weight')]

  prune.global_unstructured(
        parameters_to_prune,
        pruning_method=prune.L1Unstructured,
        amount=prune_ratio,
    )

  return model